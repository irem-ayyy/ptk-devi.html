const express = require('express');
const { ApolloServer, PubSub } = require('apollo-server-express');
const { GraphQLObjectType, GraphQLString, GraphQLList, GraphQLInt } = require('graphql');
const { RedisPubSub } = require('graphql-redis-subscriptions');
const Redis = require('ioredis');

const app = express();

// Redis bağlantısını yapılandırın
const redis = new Redis();

// PubSub için Redis kullanımını etkinleştirin
const pubsub = new RedisPubSub({
  publisher: new Redis(),
  subscriber: new Redis(),
});

// Örnek veri seti
const questions = [];

// GraphQL şemasını oluşturun
const OptionType = new GraphQLObjectType({
  name: 'Option',
  fields: {
    id: { type: GraphQLInt },
    text: { type: GraphQLString },
    votes: { type: GraphQLInt },
  },
});

const QuestionType = new GraphQLObjectType({
  name: 'Question',
  fields: {
    id: { type: GraphQLInt },
    text: { type: GraphQLString },
    options: { type: new GraphQLList(OptionType) },
  },
});

const { GraphQLServer } = require('graphql-yoga');

const typeDefs = `
  type Query {
    questions: [Question]
  }

  type Mutation {
    createQuestion(text: String!, options: [String!]!): Question
    vote(questionId: Int!, optionId: Int!): Question
  }

  type Subscription {
    questionAdded: Question
    questionVoted: Question
  }
`;

const resolvers = {
  Query: {
    questions: () => questions,
  },
  Mutation: {
    createQuestion: (_, { text, options }) => {
      const id = questions.length + 1;
      const newQuestion = { id, text, options: options.map((text, index) => ({ id: index + 1, text, votes: 0 })) };
      questions.unshift(newQuestion);
      pubsub.publish('QUESTION_ADDED', { questionAdded: newQuestion });
      return newQuestion;
    },
    vote: (_, { questionId, optionId }) => {
      const question = questions.find((q) => q.id === questionId);
      if (!question) {
        throw new Error('Question not found');
      }
      const option = question.options.find((o) => o.id === optionId);
      if (!option) {
        throw new Error('Option not found');
      }
      option.votes += 1;
      pubsub.publish('QUESTION_VOTED', { questionVoted: question });
      return question;
    },
  },
  Subscription: {
    questionAdded: {
      subscribe: () => pubsub.asyncIterator('QUESTION_ADDED'),
    },
    questionVoted: {
      subscribe: () => pubsub.asyncIterator('QUESTION_VOTED'),
    },
  },
};

const server = new ApolloServer({ typeDefs, resolvers });
server.applyMiddleware({ app });

const httpServer = require('http').createServer(app);
server.installSubscriptionHandlers(httpServer);

httpServer.listen(4000, () => {
  console.log('Server is running on http://localhost:4000');
});
***************************
import React from 'react';
import ReactDOM from 'react-dom';
import { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink, split } from '@apollo/client';
import { WebSocketLink } from '@apollo/client/link/ws';
import { getMainDefinition } from '@apollo/client/utilities';
import { gql } from '@apollo/client';
import { useSubscription } from '@apollo/react-hooks';

import './index.css';
import App from './App';
import * as serviceWorker from './serviceWorker';

const httpLink = createHttpLink({
  uri: 'http://localhost:4000/graphql',
});

const wsLink = new WebSocketLink({
  uri: `ws://localhost:4000/graphql`,
  options: {
    reconnect: true,
  },
});

const link = split(
  ({ query }) => {
    const definition = getMainDefinition(query);
    return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';
  },
  wsLink,
  httpLink
);

const client = new ApolloClient({
  link,
  cache: new InMemoryCache(),
});

const QuestionSubscription = gql`
  subscription {
    questionAdded {
      id
      text
      options {
        id
        text
        votes
      }
    }
  }
`;

function NewQuestion() {
  const { data } = useSubscription(QuestionSubscription);

  if (!data) return null;

  return (
    <div>
      <h2>New Question:</h2>
      <p>{data.questionAdded.text}</p>
    </div>
  );
}

ReactDOM.render(
  <ApolloProvider client={client}>
    <App />
    <NewQuestion />
  </ApolloProvider>,
  document.getElementById('root')
);

serviceWorker.unregister();
